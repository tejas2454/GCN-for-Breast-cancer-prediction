{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fQ5bSODFnto2"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bIyBxowyohzR"
   },
   "outputs": [],
   "source": [
    "def relu(X):\n",
    "   return np.maximum(0,X)\n",
    "\n",
    "#sigmoid and its derivative\n",
    "def sigmoid(x):\n",
    "    return 1/(1+np.exp(-x))\n",
    "\n",
    "def sigmoid_deriv(x):\n",
    "    return sigmoid(x)*(1 - sigmoid(x))\n",
    "\n",
    "#Normalize array\n",
    "def normalize(X, axis=-1, order=2):\n",
    "    l2 = np.atleast_1d(np.linalg.norm(X, order, axis))\n",
    "    l2[l2 == 0] = 1\n",
    "    return X / np.expand_dims(l2, axis)\n",
    "\n",
    "def unique(arr):\n",
    "  count1=0\n",
    "  count0=0\n",
    "  for i in range(len(arr)):\n",
    "    if arr[i]==1:\n",
    "      count1+=1\n",
    "    else:\n",
    "      count0+=1\n",
    "  return(count1,count0)\n",
    "\n",
    "  def final_mat(data,lable):\n",
    "  final_matrix=[]\n",
    "  for i in range(len(data)): \n",
    "    y=data[i,:]-data[:,:]\n",
    "    h_0=[]\n",
    "    y1=np.sum(np.square(y),axis=1)\n",
    "    y_dict={}\n",
    "    for j in range(len(y1)):\n",
    "      y_dict[j]=y1[j]\n",
    "    #y_dict\n",
    "    y_sorted={}\n",
    "    y_sorted=sorted(y_dict.items(), key=lambda x: x[1])\n",
    "    v=(np.asarray(y_sorted[0:6])[:,0]).astype(int)\n",
    "    h_0.append(np.average(data[v,:],axis=0))\n",
    "    h_0.append(lable[j])\n",
    "    final_matrix.append(list(h_0)[0])\n",
    "  return(final_matrix)\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YR1Ru3NwFOIx"
   },
   "source": [
    "#Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "i2LxMeObyk7o"
   },
   "outputs": [],
   "source": [
    "data=pd.read_csv('/content/wdbc.data',header=None)\n",
    "data.columns=[\"A\",\"B\",\"B1\",\"B2\",\"B3\",\"B4\",\"B5\",\"B6\",\"B7\",\"B8\",\"B9\",\"B10\",\"B11\",\"B12\",\"B13\",\"B14\",\"B15\",\"B16\",\"B17\",\"B18\",\"B19\",\"B20\",\"B21\",\"B22\",\"B23\",\"B24\",\"B25\",\"B26\",\"B27\",\"B28\",\"B29\",\"B30\"]\n",
    "data['B'].replace(['M', 'B'], [0,1], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7hshG3rF5xe_"
   },
   "outputs": [],
   "source": [
    "data_array1=np.asarray(data)\n",
    "np.random.shuffle(data_array1)\n",
    "data_array2=data_array1[:,2:].astype(float)\n",
    "data_array=data_array2 / data_array2.max(axis=0)\n",
    "lable_array=data_array1[:,1]\n",
    "\n",
    "train_data=data_array[0:int(data_array.shape[0]*.7),:]\n",
    "train_lable=lable_array[0:int(data_array.shape[0]*.7)]\n",
    "\n",
    "test_data= data_array[int(data_array.shape[0]*.7):int(data_array.shape[0]*.9),:]\n",
    "test_lable=lable_array[int(data_array.shape[0]*.7):int(data_array.shape[0]*.9)]\n",
    "\n",
    "validation_data=data_array[int(data_array.shape[0]*.9):,:]\n",
    "validation_lable=lable_array[int(data_array.shape[0]*.9):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Xmc277OgAWk-",
    "outputId": "7cd26c4e-d177-47dc-92ea-e9cae1d853a1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57, 31)"
      ]
     },
     "execution_count": 195,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g=np.asarray(final_mat(train_data,train_lable))\n",
    "h_0_with_lable=np.concatenate((g,train_lable.reshape((train_data.shape[0],1))),axis=1)\n",
    "h_0_with_lable.shape\n",
    "\n",
    "g1=np.asarray(final_mat(test_data,test_lable))\n",
    "test_with_lable=np.concatenate((g1,test_lable.reshape((test_data.shape[0],1))),axis=1)\n",
    "test_with_lable.shape\n",
    "\n",
    "g2=np.asarray(final_mat(validation_data,validation_lable))\n",
    "validation_with_lable=np.concatenate((g2,validation_lable.reshape((validation_data.shape[0],1))),axis=1)\n",
    "validation_with_lable.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6DllECsrFCF7"
   },
   "source": [
    "#Training with backpropagation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "colab_type": "code",
    "id": "00ElTyJyy6eT",
    "outputId": "6c221c40-50b1-44bb-8335-fa4691292ef1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 99.91%\n"
     ]
    }
   ],
   "source": [
    "w0 = 2*np.random.random((30, 30))-1\n",
    "w1 = 2*np.random.random((30,1)) - 1\n",
    "\n",
    "#learning rate\n",
    "n = 0.1\n",
    "\n",
    "#Errors - for graph later\n",
    "errors = []\n",
    "\n",
    "for i in range(1000):\n",
    "  for j in range(0,len(h_0_with_lable)):\n",
    "     l_0=h_0_with_lable[j,0:-1].reshape((30,1))\n",
    "     l_1=relu(np.dot(l_0.T,w0).reshape((30,1)))\n",
    "     l_2=sigmoid(np.dot(l_1.T,w1))\n",
    "\n",
    "     #Back propagation using gradient descent\n",
    "     l_2_error = np.sqrt(np.square(l_2-h_0_with_lable[j,-1]))\n",
    "     l_2_delta = l_2_error * sigmoid_deriv(l_2)\n",
    "     l_1_error = l_2_delta.dot(w1.T)\n",
    "     l_1_delta = l_1_error * sigmoid_deriv(l_1)\n",
    "  w1 += l_1.dot(l_2_delta)* n\n",
    "  w0 += l_0.T.dot(l_1_delta)* n\n",
    "  error = np.mean(l_2_error)   \n",
    "  errors.append(error)\n",
    "  accuracy = (1 - error) * 100\n",
    "\n",
    "plt.plot(errors)\n",
    "plt.xlabel('Training')\n",
    "plt.ylabel('Error')\n",
    "plt.show()\n",
    "        \n",
    "print(\"Training Accuracy \" + str(round(accuracy,2)) + \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "yOCLEcf0DwzP"
   },
   "source": [
    "#Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "8uhPSQHY-Mpf",
    "outputId": "97aef96b-7101-4b97-e7f7-54579ae3a288"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Accuracy 99.94%\n"
     ]
    }
   ],
   "source": [
    "for j in range(0,len(validation_with_lable)):\n",
    "  l0 = validation_with_lable[j,0:-1].reshape((30,1))\n",
    "  l1 = relu(np.dot(l0.T, w0))\n",
    "  l2 = sigmoid(np.dot(l1, w1))\n",
    "  l2_error = np.sqrt(np.square(validation_with_lable[j,-1] - l2))\n",
    "error = np.mean(np.abs(l2_error))\n",
    "accuracy = (1 - error) * 100\n",
    "print(\"Validation Accuracy \" + str(round(accuracy,2)) + \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NprtiyJaDuPH"
   },
   "source": [
    "#Testing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ADbPbM8NAGcf",
    "outputId": "2232bb51-a9fb-4961-bb70-924c0befaf2f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Accuracy 99.91%\n"
     ]
    }
   ],
   "source": [
    "for j in range(0,len(test_with_lable)):\n",
    "  l0 = test_with_lable[j,0:-1].reshape((30,1))\n",
    "  l1 = relu(np.dot(l0.T, w0))\n",
    "  l2 = sigmoid(np.dot(l1, w1))\n",
    "  l2_error = np.sqrt(np.square(test_with_lable[j,-1] - l2))\n",
    "error = np.mean(np.abs(layer2_error))\n",
    "accuracy = (1 - error) * 100\n",
    "print(\"Validation Accuracy \" + str(round(accuracy,2)) + \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "fWqC16_0UJlw"
   },
   "source": [
    "#Other Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "lv8hT1ivUMI0"
   },
   "source": [
    "##KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ziO5_1WWT8Xv",
    "outputId": "dff9ef6b-86f1-46e8-c230-e6a9b8e5d0c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 93.85964912280701 %\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import metrics\n",
    "\n",
    "model_knn = KNeighborsClassifier(n_neighbors=5)\n",
    "model_knn.fit(train_data,train_lable)\n",
    "y_pred_knn= model_knn.predict(test_data)\n",
    "\n",
    "print(\"Accuracy:\",metrics.accuracy_score(test_lable, y_pred_knn)*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4aF8UL9-UOVU"
   },
   "source": [
    "##SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "48jaogKBUC14",
    "outputId": "137ad611-f04b-48eb-a8ea-c41ac4f8d024"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 94.73684210526315 %\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "model_svm = SVC(gamma='auto', kernel='sigmoid')\n",
    "model_svm.fit(train_data,train_lable)\n",
    "y_pred_svm=model_svm.predict(test_data)\n",
    "\n",
    "print(\"Accuracy:\",metrics.accuracy_score(test_lable, y_pred_svm)*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kzD5VEyiUQeO"
   },
   "source": [
    "##LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ere2qEvSUDY8",
    "outputId": "2db4edfd-fbd7-4889-b1c3-3eec7d2fbf05"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 100.0 %\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model_logistic = LogisticRegression().fit(train_data, train_lable)\n",
    "y_pred_logistic=model_logistic.predict(test_data)\n",
    "\n",
    "print(\"Accuracy:\",model_logistic.score(test_data,y_pred_logistic)*100,'%')"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "ML2_Assignment 1_Submission.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
